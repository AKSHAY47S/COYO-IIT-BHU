
void dfs(int root, vector<int> *adj,list<int> &l, map<int,bool> &visited)
{
     visited[root]=true;
    
    for(auto x:adj[root])
    {
        if(!visited[x])
          {
                visited[x]=true;
              dfs(x,adj,l,visited);
          }
    }
    
    l.push_front(root);
}

int* topsort_with_bfs(vector<int>*adj, int v)
{
    map<int,int>indegree;
    
    for(int i=0;i<v;i++)
        indegree[i]=0;
    
    
    queue<int>q;
    for(int i=0;i<v;i++)
    {
        for(auto x:adj[i])
          indegree[x]++;
    }
    
    for(int i=0;i<v;i++)
    {
        if(indegree[i]==0)
          q.push(i);
    }
    int i=0; int*a=new int[v];
   while(!q.empty())
   {
       int node=q.front();
       q.pop();
       a[i++]=node;
       
       for(auto x:adj[node])
       {
           indegree[x]--;
           
           if(indegree[x]==0)
              q.push(x);
       }
   }
   
   return a;
   

    
    
}




int* topoSort(int v, vector<int> adj[])
{
   /* map<int,bool>visited; 
    list<int>l;
    
    for(int i=0;i<v;i++)
    {
        if(!visited[i])
         dfs(i,adj,l,visited);
    }
    
    int*a = new int[v];
    int i=0;
    for(x:l)
      a[i++]=x;
      
      return a;
    
  /*  int a[v];
    for(int i=0;i<v;i++)
    {
        a[i]=l.front();
        l.pop_front();
    }
    
    return a;*/
    
    return topsort_with_bfs(adj,v);
    
    
}
