vector<int> bfs(int n, int m, vector<vector<int>> edges, int s) {
    queue<int>q; q.push(s); map<int,int>distance;
    distance[s]=0;  map<int,vector<int>>adj;

    for(int i=0;i<m;i++)
    {
         adj[edges[i][0]].push_back(edges[i][1]);
         adj[edges[i][1]].push_back(edges[i][0]);
    }

       while(!q.empty())
       {
            int node = q.front();
            q.pop();

            for(auto x:adj[node])
            {
                
                if(distance[x]==0)
                {
                    distance[x]=1+distance[node];
                    //visited[(*it)]=true;
                    q.push(x);
                }
            }


       }

       vector<int>v;

       for(int i=1;i<=n;i++)
       {
          if(i==s)
            continue;

           if(distance[i]==0)
              v.push_back(-1);
            else
              v.push_back(6*distance[i]);   
       }
      
      return v;

      

}
