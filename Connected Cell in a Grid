#include <bits/stdc++.h>

using namespace std;

// Complete the maxRegion function below.



int dfs(int i,int j,vector< vector<int> >&grid,int n,int m)
{
      grid[i][j]=-1;

    int h=0,v=0,d=0;

    if(i+1<n && grid[i+1][j]==1 )
       {     //grid[i+1][j]=-1;
           v+=1+dfs(i+1,j,grid,n,m);}

    if(j+1<m && grid[i][j+1]==1)
        {   //grid[i][j+1]=-1;
            h+=1+dfs(i,j+1,grid,n,m);}

    if(i+1<n && j+1<m && grid[i+1][j+1]==1)
        {    //grid[i+1][j+1]=-1;
            d+=1+dfs(i+1,j+1,grid,n,m);}

    if(i+1<n && j-1>=0 && grid[i+1][j-1]==1)
        {   // grid[i+1][j-1]=-1;
            d+=1+dfs(i+1,j-1,grid,n,m);}

    if(i-1>=0 && j+1<m && grid[i-1][j+1]==1)
         d+=1+dfs(i-1,j+1,grid,n,m); 

    if(i-1>=0 && grid[i-1][j]==1)
         v+=1+dfs(i-1,j,grid,n,m);

    if(i-1>=0 && j-1>=0 && grid[i-1][j-1]==1)
        d+=1+dfs(i-1,j-1,grid,n,m);                 

        return h+v+d;           
}



int maxRegion(vector<vector<int>> grid) {

    int n=grid.size();
    int m=grid[0].size();

    int ans=0;

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
         {
             if(grid[i][j]==1)
               ans=max(ans,1+dfs(i,j,grid,n,m));
         }
    }


    return ans;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> grid(n);
    for (int i = 0; i < n; i++) {
        grid[i].resize(m);

        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int res = maxRegion(grid);

    fout << res << "\n";

    fout.close();

    return 0;
}
