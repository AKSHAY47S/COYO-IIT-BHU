bool vis[51][51];
void dfs(vector<int> a[],int n,int m,int i,int j)
{
    vis[i][j]=true;
    
    if(i>=1 && a[i-1][j]==1 && !vis[i-1][j])
     dfs(a,n,m,i-1,j);
     
    if(i+1<n && a[i+1][j]==1 && !vis[i+1][j])
      dfs(a,n,m,i+1,j);
      
    if(j+1<m && a[i][j+1]==1 && !vis[i][j+1])
      dfs(a,n,m,i,j+1);
      
    if(j-1>=0 && a[i][j-1]==1 && !vis[i][j-1])
      dfs(a,n,m,i,j-1);
      
    if(i+1<n && j-1<m && a[i+1][j-1]==1 && !vis[i+1][j-1])
       dfs(a,n,m,i+1,j-1);
       
    if(i+1<n && j+1<m && a[i+1][j+1]==1 && !vis[i+1][j+1])
       dfs(a,n,m,i+1,j+1);
       
    if(i-1>=0 && j-1>=0 && a[i-1][j-1]==1 && !vis[i-1][j-1])
       dfs(a,n,m,i-1,j-1);
       
    if(i-1>=0 && j+1<m && a[i-1][j+1]==1 && !vis[i-1][j+1])
       dfs(a,n,m,i-1,j+1);
}







int findIslands(vector<int> a[], int n, int m)
{   int count=0;  
   memset(vis,false,sizeof(vis));
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(a[i][j]==1 && !vis[i][j])
            {
                dfs(a,n,m,i,j);
                count+=1;
            }
        }
    }
    
    memset(vis,false,sizeof(vis));
    
    return count;
    
}
