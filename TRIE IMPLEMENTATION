#include <bits/stdc++.h>
using namespace std;

# define hashmap unordered_map<char,node*>

class node
{
   public:
       char data;
       hashmap h;
       bool terminal ;

  node(char d)
  {
     data=d;
     terminal=false;
  }



};












class Trie{

     node*root;

 public:
    Trie()
    {
        root = new node('\0');
    }

    // insertion

    void addword(char *word)
    {
        node*temp = root;
        for(int i=0;word[i]!='\0';i++)
        {
             char ch=word[i];

             if(temp->h.count(ch)==0)
             {
                 node*child = new node(ch);
                 temp->h[ch]=child;
                 temp=child;
             }
             else
             {
                 temp=temp->h[ch];
             }
        }

        temp->terminal=true;
    }


    bool searchwrd(char*word)
    {
        node*temp=root;

        for(int i=0;word[i]!='\0';i++)
        {
            char ch = word[i];

            if(temp->h.count(ch))
            {
                temp=temp->h[ch];
            }
            else
            {
                return false;
            }


        }


        return temp->terminal;
    }




};







int main()
{
    char word[10][100] = {"apple","ape","coder","coding blocks","no"};

    Trie t;

    for(int i=0;i<5;i++)
    {
        t.addword(word[i]);
    }


    char searchword[100];
    cin.getline(searchword,100);

    if(t.searchwrd(searchword))
        cout<<searchword<<" found "<<endl;
    else
        cout<<"not found!"<<endl;
    return 0;


}
