#include<bits/stdc++.h>
using namespace std;

template<typename T>

class Graph{

    unordered_map<T, list< pair<T,int> > >m;

public:
    void add_edge(T u, T v, int distance , bool bidir=true)
    {
        m[u].push_back(make_pair(v,distance));
        if(bidir)
         m[v].push_back(make_pair(u,distance));

        return;
    }

    void printAdj()
    {
         for(auto city:m)
         {
             cout<<city.first<<"->";

             for(auto neighbour:city.second)
                cout<<"("<<neighbour.first<<":"<<neighbour.second<<"),";

             cout<<endl;
         }
    }

    void dijkstrasssp(T src)
    {
        unordered_map<T,int>distance;

        // set all distances to infinity

        for(auto j:m)
        {
            distance[j.first] = INT_MAX;

        }

        // make a set to find out the node with the minimum distance.
        // make a set of pairs which stores node and their distances but keep the distance as first element of the pair because sorting in set is according to the first element of the pair.
        set< pair<int,T> >s;

        distance[src]=0;
        s.insert(make_pair(0,src));

        while(!s.empty())
        {
            // find the pair at the front.

            auto p = *(s.begin());
            T node = p.second;
            int node_distance = p.first;
            s.erase(s.begin());

            // Iterate over the neighbours of the current node.

            for(auto child:m[node])
            {
                if(distance[child.first]>node_distance+child.second)
                {
                    // in the set updation is not possible.
                    // we have to remove the old pair and insert the new pair to simulate the updation
                    T destination = child.first;
                    auto f = s.find(make_pair(distance[destination],destination));

                    if(f!=s.end())
                    {
                        s.erase(f);
                    }

                    // now let insert the new pair
                    distance[destination]=node_distance+child.second;
                    s.insert(make_pair(distance[destination],destination));


                }

            }



        }

        for(auto d:distance)
        {
            cout<<d.first<<" is located at a distance of "<<d.second<<" from the source. "<<endl;
        }

    }



};



int main()
{
    Graph<int> g;
    g.add_edge(1,2,1);
    g.add_edge(1,3,4);
    g.add_edge(2,3,1);
    g.add_edge(3,4,2);
    g.add_edge(1,4,7);
    g.printAdj();
    g.dijkstrasssp(1);

    return 0;

}
